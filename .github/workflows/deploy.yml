name: deploy service

on:
  push:
    branches:
      - main

jobs:
  ssh-agent:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 액션 시작 알림 메시지
      - name: Start Message
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "배포 시작"

      # 캐시 저장 설정을 위한 action(라이브러리)
      - name: Cache Docker Image Layer
      # actions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache # 캐시로 관히라 경로
          key: docker-image-layer-cache-${{ github.sha }} # 저장 & 불러올 캐시 이름(식별자)
          restore-keys: docker-image-layer-cache # 만약 캐시 key를 찾지 못하면 대체할 캐시 이름

      - name: run ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
         
      # 포트 & HOST 추가작업
      - name: Add Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true

      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env

      # 도커 BuildKit 엔진 설정 action(라이브러리)
      - name: Set up Docker BuildKit
        # setup-buildx-action : BuildKit 엔진을 설치하는 actions(라이브러리)
        # buildx = BuildKit
        uses: docker/setup-buildx-action@v3
      
      # BuildKit 엔진 빌더(이미지 빌드를 도와주는 도구) 생성
      # 기존 Docker 빌더 : Cache 파일 저장&불러오기 경로 제어 불가 
      - name: Create BuildKit 빌더
        run: |
          docker buildx create --use --name buildkit
          docker buildx use buildkit
          
      - name: Docker Image Build
        run: docker compose -f docker-compose-actions-cache.yml build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Docker Image Push
        run: docker compose push

      - name: Copy .env / docker-compose-actions-cache.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST}} 
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # source: "docker-compose.yml,.env"
          source: "docker-compose-actions-cache.yml,.env"
          target: "~/work-directory"
        
      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:  
          host: ${{ secrets.SSH_HOST}} 
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/work-directory
            docker compose -f docker-compose-actions-cache.yml pull
            docker compose -f docker-compose-actions-cache.yml down
            docker compose -f docker-compose-actions-cache.yml up -d
      
      - name: End Message - Success
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "배포 종료 - 성공"

      - name: End Message - Fail
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "배포 종료 - 실패"
      